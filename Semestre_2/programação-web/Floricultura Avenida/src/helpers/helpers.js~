class Tabela {
    /** @type TabelaTipo*/
    #_tabela

    constructor(LocalStorageKey){
        this.#_tabela = obterTabelaDoLocalStorage(LocalStorageKey)
    }

    #obterTabelaDoLocalStorage(key){
         
    }
}
/**
 * @function encontrarEmTabelaPor
 * @summary encontra objetos dentro de uma tabela
 *
 * @description Dado um valor, compara esse valor com o campo de cada objeto dentro
 * de uma tabela (array). Retorna uma tabela (array) de todos os objetos com o valor
 * correspondente ou retorna apenas um objeto se o parâmetro "unico" for passada como true
 *
 * @param {string} campo - O campo do objeto
 * @param {*} valor - O valor que deseja ser encontrado dentro da tabela
 * @param {TabelaTipo} tabela - A tabela (array de objetos)
 * @param {boolean} [unico] - Se for true, retorna somente 1 objeto e não uma array
 *
 * @returns {TabelaTipo | object | null}
 */
export function encontrarEmTabelaPor(campo, valor, tabela, unico = false) {
    const objetosComOValor = []

    tabela.some(objeto => {
        if (objeto[campo] == valor) {

            if (unico){
                objetosComOValor.push(objeto)
                return true
            }
            else {
                objetosComOValor.push(objeto)
            }
        }
    })


    if (objetosComOValor.length <= 0){ 
        return null 
    }
    else if (unico){
        return objetosComOValor[0]
    }
    else {
        return objetosComOValor
    }
}

/**
 * @function encontrarEmLocalStoragePor
 * @summary encontra objetos dentro de uma tabela
 *
 * @description Dado um valor, compara esse valor com o campo de cada objeto dentro
 * de uma tabela (array). Retorna uma tabela (array) de todos os objetos com o valor
 * correspondente ou retorna apenas um objeto se o parâmetro "unico" for passada como true
 *
 * @param {string} campo - O campo do objeto
 * @param {*} valor - O valor que deseja ser encontrado dentro da tabela
 * @param {string} keyTabela - A chave da tabela no localStorage
 * @param {boolean} [unico] - Se for true, retorna somente 1 objeto e não uma array
 *
 * @returns {TabelaTipo | object | null}
 */
export function encontrarEmLocalStoragePor(campo, valor, keyTabela, unico = false) {
    const objetosComOValor = []

    const localItem = localStorage.getItem(keyTabela)
    if (!localItem){
        return null
    }

    /** @type{object[]} */
    const tabela = JSON.parse(localItem)


    tabela.some(objeto => {
        if (objeto[campo] == valor) {

            if (unico){
                objetosComOValor.push(objeto)
                return true
            }
            else {
                objetosComOValor.push(objeto)
            }
        }
    })


    if (objetosComOValor.length <= 0){ 
        return null 
    }
    else if (unico){
        return objetosComOValor[0]
    }
    else {
        return objetosComOValor
    }
}

/*** 
 * @function AdicionarALocalStorage
 * @summary Adiciona seguramente um objeto ao localStorage
 *
 * @description Com a key da array de objetos armazenada no localStorage,
 * adiciona uma nova instância dentro da array de uma maneira segura.
 * Se não existir array, cria uma array com o item dentro e armazena no
 * localStorage.
 *
 * @param {string} key - Chave que aponta onde a array está no localStorage
 * @param {object} item - Objeto que será armazenado na array dentro do LocalStorage
 *
 * @returns {void}
 */
export function AdicionarALocalStorage(key, item){
    const localItem = localStorage.getItem(key) 

    if (!localItem){
        const itemJSON = JSON.stringify([item])  
        localStorage.setItem(key, itemJSON)
    }
    else{
        const localItemArray = JSON.parse(localItem)
        localItemArray.push(item)
        localStorage.setItem(key, JSON.stringify(localItemArray))
    }

}

/** 
 * @function criarSessao
 * @summary Cria uma sessão.
 *
 * @description Cria um objeto chamado "sessao" dentro do localStorage, se já existir
 * sobscreve o objeto com um novo valor.
 *
 * @param {string} id - O id do usuário
 *
 * @returns {void}
 */
export function criarSessao(id){
    localStorage.setItem("sessao", JSON.stringify(id))
}

/** 
 * @function validarSessao
 * @summary Verifica se uma sessão é válida.
 *
 * @description Verifica se existe algum id dentro da key "sessao" dentro do localStorage.
 * Se existir, verifica se algum membro tem esse id, se tiver, retorna true, se a sessão
 * estiver vazia ou se nenhum membro ter o id que está armazenado dentro da sessão, 
 * retorna false
 *
 * @param {string} [KeySessao] - Chave da sessão no localStorage, O valor padrão é "sessao" 
 * @param {string} [KeyTabela] - Chave da tabela no localStorage, O valor padrão é "membro"
 *
 * @return {boolean}
 */
export function validarSessao(KeySessao = "sessao", KeyTabela = "membros"){
    const sessao = JSON.parse(localStorage.getItem(KeySessao))
    if(!sessao){
        return false
    }
    else if(encontrarEmLocalStoragePor("id", sessao, KeyTabela, true) == null){
        return false 
    }
    else{
        return true
    }
}


